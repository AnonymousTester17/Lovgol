{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LOVGOL - Digital Agency Platform\n\n## Overview\n\nLOVGOL is a modern digital agency website built as a full-stack web application. The platform showcases services across web development, mobile app development, and automation solutions. It features a responsive frontend with service galleries, client testimonials, contact forms, and an admin panel for content management. The application uses a modern tech stack with React/TypeScript frontend, Express backend, and PostgreSQL database for scalable service delivery.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **State Management**: TanStack Query (React Query) for server state management and API data fetching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Animations**: Framer Motion for smooth animations and transitions\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Request Handling**: Express middleware for JSON parsing, URL encoding, and request logging\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **Development**: Vite integration for hot module replacement in development mode\n\n### Data Layer\n- **Database**: PostgreSQL with connection pooling\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema Management**: Drizzle Kit for database migrations and schema synchronization\n- **Validation**: Zod schemas for runtime type validation and API input validation\n- **Storage Pattern**: Repository pattern with both in-memory and database implementations\n\n### Database Schema Design\n- **Service Previews**: Portfolio items with categories (web/app/automation), technologies, tags, and media\n- **Contact Submissions**: Contact form submissions with service interest and budget information\n- **Inquiry Submissions**: Detailed project inquiry forms with service-specific requirements\n- **Audit Fields**: Created/updated timestamps for data tracking\n\n### Authentication & Security\n- **Session Management**: Express sessions with PostgreSQL session store using connect-pg-simple\n- **Input Validation**: Zod schemas for all API endpoints to prevent malicious input\n- **Environment Security**: Environment variables for sensitive configuration\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting via @neondatabase/serverless\n- **Connection**: PostgreSQL connection via DATABASE_URL environment variable\n\n### UI Component Libraries\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives including dialogs, forms, navigation, and data display components\n- **Shadcn/ui**: Pre-built component system using Radix UI with Tailwind CSS styling\n\n### Development Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **TypeScript**: Static type checking across frontend, backend, and shared code\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **ESBuild**: Fast bundling for production server builds\n\n### External Integrations\n- **WhatsApp Business**: Direct messaging integration for customer communication\n- **Google Fonts**: Web fonts (Inter, DM Sans, Fira Code, Geist Mono, Architects Daughter)\n- **Unsplash/Pixabay**: Image hosting for service previews and testimonials\n\n### Replit-Specific Features\n- **Development Plugins**: Cartographer for project mapping and dev banner for development environment\n- **Error Handling**: Runtime error modal overlay for improved debugging experience","size_bytes":3992},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in-up\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in-left\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(-50px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        \"slide-in-right\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(50px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        \"count-up\": {\n          from: { opacity: \"0\", transform: \"translateY(20px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in-up\": \"fade-in-up 0.8s ease-out forwards\",\n        \"slide-in-left\": \"slide-in-left 0.8s ease-out forwards\",\n        \"slide-in-right\": \"slide-in-right 0.8s ease-out forwards\",\n        \"count-up\": \"count-up 1s ease-out forwards\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3164},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertServicePreviewSchema, insertContactSubmissionSchema, insertInquirySubmissionSchema, insertBlogPostSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Service Previews Routes\n  app.get(\"/api/service-previews\", async (req, res) => {\n    try {\n      const { category, technology } = req.query;\n      \n      let previews;\n      if (category && typeof category === 'string') {\n        previews = await storage.getServicePreviewsByCategory(category);\n      } else if (technology && typeof technology === 'string') {\n        previews = await storage.getServicePreviewsByTechnology(technology);\n      } else {\n        previews = await storage.getServicePreviews();\n      }\n      \n      res.json(previews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch service previews\" });\n    }\n  });\n\n  app.get(\"/api/service-previews/:id\", async (req, res) => {\n    try {\n      const preview = await storage.getServicePreview(req.params.id);\n      if (!preview) {\n        return res.status(404).json({ message: \"Service preview not found\" });\n      }\n      res.json(preview);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch service preview\" });\n    }\n  });\n\n  app.post(\"/api/service-previews\", async (req, res) => {\n    try {\n      const validatedData = insertServicePreviewSchema.parse(req.body);\n      const preview = await storage.createServicePreview(validatedData);\n      res.status(201).json(preview);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create service preview\" });\n      }\n    }\n  });\n\n  app.put(\"/api/service-previews/:id\", async (req, res) => {\n    try {\n      const validatedData = insertServicePreviewSchema.partial().parse(req.body);\n      const preview = await storage.updateServicePreview(req.params.id, validatedData);\n      res.json(preview);\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message === \"Service preview not found\") {\n          res.status(404).json({ message: error.message });\n        } else {\n          res.status(400).json({ message: error.message });\n        }\n      } else {\n        res.status(500).json({ message: \"Failed to update service preview\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/service-previews/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteServicePreview(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Service preview not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service preview\" });\n    }\n  });\n\n  // Contact Submissions Routes\n  app.post(\"/api/contact-submissions\", async (req, res) => {\n    try {\n      const validatedData = insertContactSubmissionSchema.parse(req.body);\n      const submission = await storage.createContactSubmission(validatedData);\n      res.status(201).json(submission);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create contact submission\" });\n      }\n    }\n  });\n\n  app.get(\"/api/contact-submissions\", async (req, res) => {\n    try {\n      const submissions = await storage.getContactSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact submissions\" });\n    }\n  });\n\n  // Inquiry Submissions Routes\n  app.post(\"/api/inquiry-submissions\", async (req, res) => {\n    try {\n      const validatedData = insertInquirySubmissionSchema.parse(req.body);\n      const submission = await storage.createInquirySubmission(validatedData);\n      res.status(201).json(submission);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create inquiry submission\" });\n      }\n    }\n  });\n\n  app.get(\"/api/inquiry-submissions\", async (req, res) => {\n    try {\n      const submissions = await storage.getInquirySubmissions();\n      res.json(submissions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inquiry submissions\" });\n    }\n  });\n\n  // Blog Posts Routes\n  app.get(\"/api/blog-posts\", async (req, res) => {\n    try {\n      const { published } = req.query;\n      let posts;\n      \n      if (published === 'true') {\n        posts = await storage.getPublishedBlogPosts();\n      } else {\n        posts = await storage.getBlogPosts();\n      }\n      \n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog-posts/:id\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.get(\"/api/blog-posts/slug/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPostBySlug(req.params.slug);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.post(\"/api/blog-posts\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.parse(req.body);\n      const post = await storage.createBlogPost(validatedData);\n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create blog post\" });\n      }\n    }\n  });\n\n  app.put(\"/api/blog-posts/:id\", async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.partial().parse(req.body);\n      const post = await storage.updateBlogPost(req.params.id, validatedData);\n      res.json(post);\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message === \"Blog post not found\") {\n          res.status(404).json({ message: error.message });\n        } else {\n          res.status(400).json({ message: error.message });\n        }\n      } else {\n        res.status(500).json({ message: \"Failed to update blog post\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/blog-posts/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteBlogPost(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7204},"server/storage.ts":{"content":"import { type ServicePreview, type InsertServicePreview, type ContactSubmission, type InsertContactSubmission, type InquirySubmission, type InsertInquirySubmission, type BlogPost, type InsertBlogPost } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Service Previews\n  getServicePreviews(): Promise<ServicePreview[]>;\n  getServicePreviewsByCategory(category: string): Promise<ServicePreview[]>;\n  getServicePreviewsByTechnology(technology: string): Promise<ServicePreview[]>;\n  getServicePreview(id: string): Promise<ServicePreview | undefined>;\n  createServicePreview(preview: InsertServicePreview): Promise<ServicePreview>;\n  updateServicePreview(id: string, preview: Partial<InsertServicePreview>): Promise<ServicePreview>;\n  deleteServicePreview(id: string): Promise<boolean>;\n  \n  // Contact Submissions\n  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;\n  getContactSubmissions(): Promise<ContactSubmission[]>;\n  \n  // Inquiry Submissions\n  createInquirySubmission(submission: InsertInquirySubmission): Promise<InquirySubmission>;\n  getInquirySubmissions(): Promise<InquirySubmission[]>;\n\n  // Blog Posts\n  getBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost>;\n  deleteBlogPost(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private servicePreviews: Map<string, ServicePreview>;\n  private contactSubmissions: Map<string, ContactSubmission>;\n  private inquirySubmissions: Map<string, InquirySubmission>;\n  private blogPosts: Map<string, BlogPost>;\n\n  constructor() {\n    this.servicePreviews = new Map();\n    this.contactSubmissions = new Map();\n    this.inquirySubmissions = new Map();\n    this.blogPosts = new Map();\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Website Development samples\n    const webPreviews: InsertServicePreview[] = [\n      {\n        title: \"E-commerce Platform\",\n        description: \"Full-featured online store with payment integration\",\n        category: \"web\",\n        technology: \"mern\",\n        tags: [\"React\", \"MongoDB\", \"E-commerce\"],\n        imageUrl: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Analytics Dashboard\",\n        description: \"Real-time data visualization and reporting\",\n        category: \"web\",\n        technology: \"mern\",\n        tags: [\"React\", \"Express\", \"Analytics\"],\n        imageUrl: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Corporate Website\",\n        description: \"Professional business presence with CMS\",\n        category: \"web\",\n        technology: \"php\",\n        tags: [\"PHP\", \"MySQL\", \"CMS\"],\n        imageUrl: \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Content Platform\",\n        description: \"Custom WordPress solution with advanced features\",\n        category: \"web\",\n        technology: \"wordpress\",\n        tags: [\"WordPress\", \"Custom Theme\"],\n        imageUrl: \"https://pixabay.com/get/gb31d541cfec4dcaca1f4e0b246e16b2654e28cb7b833e1a5895efb445663ea56a429097eb7be110a47c550ff0505e904c7cf2d1444d18825318a4d74a48de3d5_1280.jpg\"\n      }\n    ];\n\n    // App Development samples\n    const appPreviews: InsertServicePreview[] = [\n      {\n        title: \"Social Media App\",\n        description: \"Cross-platform social networking application\",\n        category: \"app\",\n        technology: \"react-native\",\n        tags: [\"React Native\", \"iOS\", \"Android\"],\n        imageUrl: \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Fitness Tracker\",\n        description: \"Health and fitness tracking mobile app\",\n        category: \"app\",\n        technology: \"flutter\",\n        tags: [\"Flutter\", \"Dart\"],\n        imageUrl: \"https://images.unsplash.com/photo-1551650975-87deedd944c3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Shopping App\",\n        description: \"Mobile e-commerce with secure payments\",\n        category: \"app\",\n        technology: \"react-native\",\n        tags: [\"React Native\", \"Payment\"],\n        imageUrl: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Learning Platform\",\n        description: \"Interactive educational mobile application\",\n        category: \"app\",\n        technology: \"flutter\",\n        tags: [\"Flutter\", \"Education\"],\n        imageUrl: \"https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      }\n    ];\n\n    // Automation samples\n    const automationPreviews: InsertServicePreview[] = [\n      {\n        title: \"Data Processing\",\n        description: \"Automated data analysis and reporting\",\n        category: \"automation\",\n        technology: \"python\",\n        tags: [\"Python\", \"pandas\"],\n        imageUrl: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"API Integration\",\n        description: \"Seamless third-party service automation\",\n        category: \"automation\",\n        technology: \"nodejs\",\n        tags: [\"Node.js\", \"API\"],\n        imageUrl: \"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Web Scraping\",\n        description: \"Automated data extraction and monitoring\",\n        category: \"automation\",\n        technology: \"python\",\n        tags: [\"Python\", \"Scraping\"],\n        imageUrl: \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        title: \"Process Automation\",\n        description: \"Business workflow and task automation\",\n        category: \"automation\",\n        technology: \"nodejs\",\n        tags: [\"Node.js\", \"Workflow\"],\n        imageUrl: \"https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      }\n    ];\n\n    [...webPreviews, ...appPreviews, ...automationPreviews].forEach(preview => {\n      const id = randomUUID();\n      const servicePreview: ServicePreview = {\n        ...preview,\n        id,\n        tags: (preview.tags as string[]) || [],\n        imageUrl: preview.imageUrl || null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.servicePreviews.set(id, servicePreview);\n    });\n\n    // Initialize sample blog posts\n    const blogPostsData: InsertBlogPost[] = [\n      {\n        title: \"The Future of Web Development: Trends to Watch in 2024\",\n        slug: \"future-web-development-trends-2024\",\n        excerpt: \"Discover the latest trends shaping the web development landscape and how they'll impact your next project.\",\n        content: `# The Future of Web Development: Trends to Watch in 2024\n\nAs we move forward in the digital age, web development continues to evolve at an unprecedented pace. At LOVGOL, we stay at the forefront of these changes to deliver cutting-edge solutions to our clients.\n\n## 1. AI-Powered Development\n\nArtificial Intelligence is revolutionizing how we build websites and applications. From automated code generation to intelligent testing, AI tools are making development faster and more efficient.\n\n## 2. Progressive Web Apps (PWAs)\n\nPWAs continue to bridge the gap between web and mobile applications, offering native-like experiences with web technologies.\n\n## 3. Serverless Architecture\n\nThe shift towards serverless computing is enabling more scalable and cost-effective solutions.\n\n## Conclusion\n\nThese trends represent exciting opportunities for businesses to enhance their digital presence. At LOVGOL, we're ready to help you navigate these changes.`,\n        featuredImage: \"https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"Technology\",\n        tags: [\"Web Development\", \"AI\", \"PWA\", \"Serverless\"],\n        isPublished: true,\n        publishedAt: new Date(\"2024-01-15\"),\n      },\n      {\n        title: \"Mobile App Development: Native vs Cross-Platform in 2024\",\n        slug: \"mobile-app-native-vs-cross-platform-2024\",\n        excerpt: \"Compare the advantages of native and cross-platform development approaches for your mobile app project.\",\n        content: `# Mobile App Development: Native vs Cross-Platform in 2024\n\nChoosing the right development approach for your mobile app is crucial for success. Let's explore the pros and cons of each approach.\n\n## Native Development\n\nNative apps offer the best performance and platform-specific features but require separate codebases.\n\n### Advantages:\n- Superior performance\n- Full access to device features\n- Platform-specific UI/UX\n\n## Cross-Platform Development\n\nTools like React Native and Flutter allow code sharing across platforms.\n\n### Advantages:\n- Faster development\n- Cost-effective\n- Single codebase\n\n## Our Recommendation\n\nAt LOVGOL, we help you choose the right approach based on your specific needs, budget, and timeline.`,\n        featuredImage: \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"Mobile Development\",\n        tags: [\"Mobile Apps\", \"React Native\", \"Flutter\", \"iOS\", \"Android\"],\n        isPublished: true,\n        publishedAt: new Date(\"2024-01-10\"),\n      },\n      {\n        title: \"Automation Success Story: How We Saved DataCorp 500K Annually\",\n        slug: \"automation-success-story-datacorp\",\n        excerpt: \"Learn how our automation solutions transformed DataCorp's operations and delivered massive cost savings.\",\n        content: `# Automation Success Story: How We Saved DataCorp 500K Annually\n\nAt LOVGOL, we believe in the power of automation to transform businesses. Here's how we helped DataCorp revolutionize their operations.\n\n## The Challenge\n\nDataCorp was processing millions of records manually, leading to:\n- High operational costs\n- Human errors\n- Slow processing times\n\n## Our Solution\n\nWe implemented a comprehensive automation pipeline using:\n- Python for data processing\n- Apache Kafka for real-time streaming\n- Docker for containerization\n- Kubernetes for orchestration\n\n## Results\n\n- 95% reduction in processing time\n- 99.9% accuracy improvement\n- $500K annual cost savings\n- Zero manual intervention required\n\n## Conclusion\n\nThis project showcases the transformative power of intelligent automation when applied strategically.`,\n        featuredImage: \"https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"Case Studies\",\n        tags: [\"Automation\", \"Python\", \"Case Study\", \"ROI\"],\n        isPublished: true,\n        publishedAt: new Date(\"2024-01-05\"),\n      }\n    ];\n\n    blogPostsData.forEach(postData => {\n      const id = randomUUID();\n      const blogPost: BlogPost = {\n        ...postData,\n        id,\n        tags: postData.tags as string[],\n        featuredImage: postData.featuredImage || null,\n        publishedAt: postData.publishedAt || null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.blogPosts.set(id, blogPost);\n    });\n  }\n\n  async getServicePreviews(): Promise<ServicePreview[]> {\n    return Array.from(this.servicePreviews.values());\n  }\n\n  async getServicePreviewsByCategory(category: string): Promise<ServicePreview[]> {\n    return Array.from(this.servicePreviews.values()).filter(\n      preview => preview.category === category\n    );\n  }\n\n  async getServicePreviewsByTechnology(technology: string): Promise<ServicePreview[]> {\n    return Array.from(this.servicePreviews.values()).filter(\n      preview => preview.technology === technology\n    );\n  }\n\n  async getServicePreview(id: string): Promise<ServicePreview | undefined> {\n    return this.servicePreviews.get(id);\n  }\n\n  async createServicePreview(insertPreview: InsertServicePreview): Promise<ServicePreview> {\n    const id = randomUUID();\n    const servicePreview: ServicePreview = {\n      ...insertPreview,\n      id,\n      tags: (insertPreview.tags as string[]) || [],\n      imageUrl: insertPreview.imageUrl || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.servicePreviews.set(id, servicePreview);\n    return servicePreview;\n  }\n\n  async updateServicePreview(id: string, updatePreview: Partial<InsertServicePreview>): Promise<ServicePreview> {\n    const existing = this.servicePreviews.get(id);\n    if (!existing) {\n      throw new Error(\"Service preview not found\");\n    }\n    \n    const updated: ServicePreview = {\n      ...existing,\n      ...updatePreview,\n      tags: (updatePreview.tags as string[]) || existing.tags,\n      imageUrl: updatePreview.imageUrl !== undefined ? (updatePreview.imageUrl || null) : existing.imageUrl,\n      updatedAt: new Date(),\n    };\n    this.servicePreviews.set(id, updated);\n    return updated;\n  }\n\n  async deleteServicePreview(id: string): Promise<boolean> {\n    return this.servicePreviews.delete(id);\n  }\n\n  async createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission> {\n    const id = randomUUID();\n    const contactSubmission: ContactSubmission = {\n      ...submission,\n      id,\n      service: submission.service || null,\n      budget: submission.budget || null,\n      submittedAt: new Date(),\n    };\n    this.contactSubmissions.set(id, contactSubmission);\n    return contactSubmission;\n  }\n\n  async getContactSubmissions(): Promise<ContactSubmission[]> {\n    return Array.from(this.contactSubmissions.values());\n  }\n\n  async createInquirySubmission(submission: InsertInquirySubmission): Promise<InquirySubmission> {\n    const id = randomUUID();\n    const inquirySubmission: InquirySubmission = {\n      ...submission,\n      id,\n      submittedAt: new Date(),\n    };\n    this.inquirySubmissions.set(id, inquirySubmission);\n    return inquirySubmission;\n  }\n\n  async getInquirySubmissions(): Promise<InquirySubmission[]> {\n    return Array.from(this.inquirySubmissions.values());\n  }\n\n  async getBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values())\n      .filter(post => post.isPublished)\n      .sort((a, b) => {\n        const aDate = a.publishedAt || a.createdAt;\n        const bDate = b.publishedAt || b.createdAt;\n        return new Date(bDate).getTime() - new Date(aDate).getTime();\n      });\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    return this.blogPosts.get(id);\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    return Array.from(this.blogPosts.values()).find(post => post.slug === slug);\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    const id = randomUUID();\n    const blogPost: BlogPost = {\n      ...insertPost,\n      id,\n      tags: insertPost.tags as string[],\n      featuredImage: insertPost.featuredImage || null,\n      publishedAt: insertPost.publishedAt || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, blogPost);\n    return blogPost;\n  }\n\n  async updateBlogPost(id: string, updatePost: Partial<InsertBlogPost>): Promise<BlogPost> {\n    const existing = this.blogPosts.get(id);\n    if (!existing) {\n      throw new Error(\"Blog post not found\");\n    }\n    \n    const updated: BlogPost = {\n      ...existing,\n      ...updatePost,\n      tags: updatePost.tags !== undefined ? (updatePost.tags as string[]) : existing.tags,\n      featuredImage: updatePost.featuredImage !== undefined ? (updatePost.featuredImage || null) : existing.featuredImage,\n      publishedAt: updatePost.publishedAt !== undefined ? updatePost.publishedAt : existing.publishedAt,\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, updated);\n    return updated;\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    return this.blogPosts.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":16750},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, json, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const servicesPreviews = pgTable(\"services_previews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // 'web', 'app', 'automation'\n  technology: text(\"technology\").notNull(), // 'mern', 'php', 'wordpress', 'react-native', 'flutter', 'python', 'nodejs'\n  tags: json(\"tags\").$type<string[]>().notNull().default(sql`'[]'::json`),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  service: text(\"service\"),\n  budget: text(\"budget\"),\n  message: text(\"message\").notNull(),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\nexport const inquirySubmissions = pgTable(\"inquiry_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  service: text(\"service\").notNull(),\n  details: text(\"details\").notNull(),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  featuredImage: text(\"featured_image\"),\n  category: text(\"category\").notNull(),\n  tags: json(\"tags\").$type<string[]>().notNull().default(sql`'[]'::json`),\n  isPublished: boolean(\"is_published\").notNull().default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertServicePreviewSchema = createInsertSchema(servicesPreviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertInquirySubmissionSchema = createInsertSchema(inquirySubmissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type ServicePreview = typeof servicesPreviews.$inferSelect;\nexport type InsertServicePreview = z.infer<typeof insertServicePreviewSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\nexport type InquirySubmission = typeof inquirySubmissions.$inferSelect;\nexport type InsertInquirySubmission = z.infer<typeof insertInquirySubmissionSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\n","size_bytes":3242},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport CaseStudy from \"@/pages/case-study\";\nimport Blog from \"@/pages/blog\";\nimport BlogPost from \"@/pages/blog-post\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/case-study/:id\" component={CaseStudy} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/blog/:slug\" component={BlogPost} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1064},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(267, 84%, 61%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --radius: 0.75rem;\n  --font-sans: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--font-sans);\n  background: var(--background);\n  color: var(--foreground);\n  overflow-x: hidden;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.parallax {\n  transform-style: preserve-3d;\n  perspective: 1000px;\n}\n\n.masked-text {\n  background: linear-gradient(45deg, #3b82f6, #8b5cf6, #ec4899);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  color: transparent;\n}\n\n.glass-card {\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.stacked-cards {\n  transform-style: preserve-3d;\n}\n\n.service-card:hover {\n  transform: translateY(-10px) scale(1.02);\n  box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);\n}\n\n.smooth-scroll {\n  scroll-behavior: smooth;\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, \n    hsl(222, 84%, 5%) 0%, \n    hsl(221, 83%, 8%) 35%, \n    hsl(267, 50%, 12%) 100%);\n}\n\n.hero-gradient {\n  background: linear-gradient(135deg, \n    rgba(59, 130, 246, 0.1) 0%, \n    rgba(139, 92, 246, 0.1) 50%, \n    rgba(236, 72, 153, 0.1) 100%);\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(50px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.8s ease-out forwards;\n}\n\n.animate-slide-in-left {\n  animation: slideInLeft 0.8s ease-out forwards;\n}\n\n.animate-slide-in-right {\n  animation: slideInRight 0.8s ease-out forwards;\n}\n\n.horizontal-scroll {\n  display: flex;\n  overflow-x: auto;\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n}\n\n.horizontal-scroll::-webkit-scrollbar {\n  display: none;\n}\n\n.sticky-section {\n  position: sticky;\n  top: 0;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n}\n\n@keyframes countUp {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.counter {\n  animation: countUp 1s ease-out forwards;\n}\n\n.filter-tab.active {\n  background: var(--primary);\n  color: var(--primary-foreground);\n}\n\n@media (max-width: 768px) {\n  .hero-text {\n    font-size: 3rem;\n  }\n  .horizontal-scroll {\n    flex-direction: column;\n    overflow-x: visible;\n  }\n}\n","size_bytes":3668},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/About.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Rocket, Users } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function About() {\n  const countersRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            animateCounters();\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n      { threshold: 0.5 }\n    );\n\n    if (countersRef.current) {\n      observer.observe(countersRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  const animateCounters = () => {\n    const counters = document.querySelectorAll('.counter');\n    counters.forEach(counter => {\n      const target = +counter.getAttribute('data-target')!;\n      let count = 0;\n      const increment = target / 100;\n      \n      const updateCount = () => {\n        count += increment;\n        if (count < target) {\n          counter.textContent = Math.ceil(count).toString();\n          requestAnimationFrame(updateCount);\n        } else {\n          counter.textContent = target.toString();\n        }\n      };\n      \n      updateCount();\n    });\n  };\n\n  return (\n    <section id=\"about\" className=\"min-h-screen bg-gradient-bg\" data-testid=\"about-section\">\n      <div className=\"flex flex-col lg:flex-row min-h-screen\">\n        {/* Left side - Sticky Image */}\n        <div className=\"lg:w-1/2 sticky top-0 h-screen flex items-center\">\n          <img\n            src=\"https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=1000\"\n            alt=\"Creative workspace with team collaboration\"\n            className=\"w-full h-full object-cover\"\n            data-testid=\"about-image\"\n          />\n        </div>\n        \n        {/* Right side - Scrolling Content */}\n        <div className=\"lg:w-1/2 px-8 py-16 lg:py-32 space-y-16\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-5xl font-bold mb-6 masked-text\" data-testid=\"about-title\">\n              About Us\n            </h2>\n            <p className=\"text-lg text-muted-foreground leading-relaxed mb-8\" data-testid=\"about-description\">\n              We are a team of passionate developers and designers dedicated to creating exceptional digital experiences. \n              With years of expertise in cutting-edge technologies, we transform your vision into reality.\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              viewport={{ once: true }}\n              className=\"glass-card p-6 rounded-lg\"\n              data-testid=\"innovation-card\"\n            >\n              <Rocket className=\"h-8 w-8 text-primary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-3\">Innovation First</h3>\n              <p className=\"text-muted-foreground\">Always adopting the latest technologies and best practices.</p>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, x: 50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              viewport={{ once: true }}\n              className=\"glass-card p-6 rounded-lg\"\n              data-testid=\"client-card\"\n            >\n              <Users className=\"h-8 w-8 text-accent mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-3\">Client-Centric</h3>\n              <p className=\"text-muted-foreground\">Your success is our priority, every step of the way.</p>\n            </motion.div>\n          </div>\n\n          {/* Rolling Counters */}\n          <div ref={countersRef} className=\"grid grid-cols-2 md:grid-cols-4 gap-8 py-8\" data-testid=\"counters-section\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-primary counter\" data-target=\"150\" data-testid=\"counter-projects\">\n                0\n              </div>\n              <div className=\"text-muted-foreground\">Projects</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-accent counter\" data-target=\"98\" data-testid=\"counter-clients\">\n                0\n              </div>\n              <div className=\"text-muted-foreground\">Clients</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-primary counter\" data-target=\"5\" data-testid=\"counter-years\">\n                0\n              </div>\n              <div className=\"text-muted-foreground\">Years</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-accent counter\" data-target=\"24\" data-testid=\"counter-support\">\n                0\n              </div>\n              <div className=\"text-muted-foreground\">Support</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5349},"client/src/components/AdminServiceForm.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Plus, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ServicePreview } from \"@shared/schema\";\n\nconst serviceFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  category: z.enum([\"web\", \"app\", \"automation\"], {\n    required_error: \"Please select a category\",\n  }),\n  technology: z.string().min(1, \"Technology is required\"),\n  imageUrl: z.string().url(\"Must be a valid URL\").optional().or(z.literal(\"\")),\n  tags: z.array(z.string()).min(1, \"At least one tag is required\"),\n});\n\ntype ServiceFormData = z.infer<typeof serviceFormSchema>;\n\ninterface AdminServiceFormProps {\n  service: ServicePreview | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function AdminServiceForm({ service, onSuccess, onCancel }: AdminServiceFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newTag, setNewTag] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<ServiceFormData>({\n    resolver: zodResolver(serviceFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"web\",\n      technology: \"\",\n      imageUrl: \"\",\n      tags: [],\n    },\n  });\n\n  const watchedCategory = form.watch(\"category\");\n\n  const technologies = {\n    web: [\n      { value: \"mern\", label: \"MERN Stack\" },\n      { value: \"php\", label: \"PHP\" },\n      { value: \"wordpress\", label: \"WordPress\" },\n    ],\n    app: [\n      { value: \"react-native\", label: \"React Native\" },\n      { value: \"flutter\", label: \"Flutter\" },\n    ],\n    automation: [\n      { value: \"python\", label: \"Python\" },\n      { value: \"nodejs\", label: \"Node.js\" },\n    ],\n  };\n\n  useEffect(() => {\n    if (service) {\n      form.reset({\n        title: service.title,\n        description: service.description,\n        category: service.category as \"web\" | \"app\" | \"automation\",\n        technology: service.technology,\n        imageUrl: service.imageUrl || \"\",\n        tags: service.tags,\n      });\n    }\n  }, [service, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ServiceFormData) => {\n      await apiRequest(\"POST\", \"/api/service-previews\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-previews\"] });\n      toast({\n        title: \"Service created\",\n        description: \"Service preview has been created successfully.\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create service preview.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: ServiceFormData) => {\n      await apiRequest(\"PUT\", `/api/service-previews/${service!.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-previews\"] });\n      toast({\n        title: \"Service updated\",\n        description: \"Service preview has been updated successfully.\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update service preview.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: ServiceFormData) => {\n    setIsSubmitting(true);\n    if (service) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const addTag = () => {\n    if (newTag.trim()) {\n      const currentTags = form.getValues(\"tags\");\n      if (!currentTags.includes(newTag.trim())) {\n        form.setValue(\"tags\", [...currentTags, newTag.trim()]);\n        setNewTag(\"\");\n      }\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    const currentTags = form.getValues(\"tags\");\n    form.setValue(\n      \"tags\",\n      currentTags.filter((tag) => tag !== tagToRemove)\n    );\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onCancel}>\n      <DialogContent \n        className=\"max-w-2xl glass-card border-border max-h-[80vh] overflow-y-auto\"\n        data-testid=\"admin-service-form\"\n      >\n        <DialogHeader>\n          <div className=\"flex justify-between items-start\">\n            <DialogTitle \n              className=\"text-2xl font-bold\"\n              data-testid=\"form-title\"\n            >\n              {service ? \"Edit Service\" : \"Add New Service\"}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCancel}\n              data-testid=\"button-cancel-form\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"service-form\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Service title\"\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Service description\"\n                      rows={3}\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"web\">Website Development</SelectItem>\n                        <SelectItem value=\"app\">App Development</SelectItem>\n                        <SelectItem value=\"automation\">Automation</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"technology\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Technology</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-technology\">\n                          <SelectValue placeholder=\"Select technology\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {technologies[watchedCategory]?.map((tech) => (\n                          <SelectItem key={tech.value} value={tech.value}>\n                            {tech.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL (optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"https://example.com/image.jpg\"\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-image-url\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"space-y-4\">\n              <FormLabel>Tags</FormLabel>\n              <div className=\"flex gap-2\">\n                <Input\n                  value={newTag}\n                  onChange={(e) => setNewTag(e.target.value)}\n                  placeholder=\"Add a tag\"\n                  className=\"bg-input border-border\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\n                  data-testid=\"input-new-tag\"\n                />\n                <Button\n                  type=\"button\"\n                  onClick={addTag}\n                  variant=\"outline\"\n                  data-testid=\"button-add-tag\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {form.watch(\"tags\").map((tag, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"secondary\"\n                    className=\"flex items-center gap-1\"\n                    data-testid={`tag-${index}`}\n                  >\n                    {tag}\n                    <button\n                      type=\"button\"\n                      onClick={() => removeTag(tag)}\n                      className=\"ml-1 hover:text-destructive\"\n                      data-testid={`button-remove-tag-${index}`}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n              {form.formState.errors.tags && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.tags.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex gap-4 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 bg-primary hover:bg-primary/80\"\n                data-testid=\"button-submit-service\"\n              >\n                {isSubmitting ? \"Saving...\" : service ? \"Update Service\" : \"Create Service\"}\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={onCancel}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"button-cancel-service\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12346},"client/src/components/Clients.tsx":{"content":"import { motion } from \"framer-motion\";\nimport TestimonialsCarousel from \"./TestimonialsCarousel\";\n\nexport default function Clients() {\n  const testimonials = [\n    {\n      id: 1,\n      name: \"Sarah Johnson\",\n      role: \"CEO\",\n      company: \"TechCorp\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      text: \"LOVGOL transformed our digital presence completely. The team's expertise in modern web technologies delivered beyond our expectations.\",\n      rating: 5\n    },\n    {\n      id: 2,\n      name: \"Emily Chen\",\n      role: \"Product Manager\",\n      company: \"StartupX\", \n      image: \"https://images.unsplash.com/photo-1494790108755-2616b332c8c2?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      text: \"Outstanding mobile app development. Our users love the smooth performance and intuitive design they created for us.\",\n      rating: 5\n    },\n    {\n      id: 3,\n      name: \"Michael Rodriguez\",\n      role: \"CTO\",\n      company: \"InnovateLab\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      text: \"The automation solutions they built saved us countless hours. Professional, reliable, and innovative approach to problem-solving.\",\n      rating: 5\n    },\n    {\n      id: 4,\n      name: \"Lisa Wang\",\n      role: \"Founder\",\n      company: \"DigitalFlow\",\n      image: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      text: \"From concept to launch, LOVGOL exceeded every expectation. Their attention to detail and user experience is unmatched.\",\n      rating: 5\n    },\n    {\n      id: 5,\n      name: \"David Kim\",\n      role: \"VP Engineering\",\n      company: \"CloudTech\",\n      image: \"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n      text: \"Working with LOVGOL was seamless. They delivered a robust, scalable solution that perfectly aligned with our technical requirements.\",\n      rating: 5\n    }\n  ];\n\n  const companyLogos = [\"TechCorp\", \"StartupX\", \"InnovateLab\", \"DigitalFlow\", \"CloudTech\"];\n\n  return (\n    <section id=\"clients\" className=\"py-20 bg-gradient-bg\" data-testid=\"clients-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-6xl font-black mb-6 masked-text\" data-testid=\"clients-title\">\n            Our Clients\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"clients-description\">\n            Trusted by businesses worldwide to deliver exceptional results\n          </p>\n        </div>\n\n        {/* Testimonials Carousel */}\n        <div className=\"mb-16\">\n          <TestimonialsCarousel \n            testimonials={testimonials}\n            autoPlay={true}\n            interval={6000}\n          />\n        </div>\n\n        {/* Client Logos */}\n        <div className=\"text-center\" data-testid=\"client-logos-section\">\n          <h3 className=\"text-2xl font-semibold mb-8\" data-testid=\"trusted-companies-title\">\n            Trusted by Leading Companies\n          </h3>\n          <div className=\"flex flex-wrap justify-center items-center gap-8 opacity-60\">\n            {companyLogos.map((logo, index) => (\n              <div\n                key={index}\n                className=\"bg-white/10 px-6 py-4 rounded-lg\"\n                data-testid={`company-logo-${index}`}\n              >\n                <span className=\"text-xl font-bold\">{logo}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3724},"client/src/components/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Mail, Phone, MapPin, Send, MessageCircle, Twitter, Linkedin, Github, Instagram } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { openWhatsApp } from \"@/lib/whatsapp\";\nimport { useEmailJS } from \"@/hooks/useEmailJS\";\nimport { motion } from \"framer-motion\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  service: z.string().optional(),\n  budget: z.string().optional(),\n  message: z.string().min(1, \"Message is required\"),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { sendEmail } = useEmailJS();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      service: \"\",\n      budget: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      // Save to database\n      await apiRequest(\"POST\", \"/api/contact-submissions\", data);\n      \n      // Send email via EmailJS\n      await sendEmail({\n        from_name: data.name,\n        from_email: data.email,\n        message: data.message,\n        service: data.service,\n        budget: data.budget,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent!\",\n        description: \"Thank you for your message. We'll get back to you soon.\",\n      });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    setIsSubmitting(true);\n    contactMutation.mutate(data);\n  };\n\n  const handleWhatsAppClick = () => {\n    const formData = form.getValues();\n    const message = `Hi LOVGOL,\\n\\nName: ${formData.name || 'Not specified'}\\nEmail: ${formData.email || 'Not specified'}\\nService: ${formData.service || 'Not specified'}\\nBudget: ${formData.budget || 'Not specified'}\\nMessage: ${formData.message || 'Not specified'}`;\n    openWhatsApp(message);\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-background\" data-testid=\"contact-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-6xl font-black mb-6 masked-text\" data-testid=\"contact-title\">\n            Get In Touch\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"contact-description\">\n            Ready to start your project? Let's discuss how we can bring your vision to life.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"glass-card p-8 rounded-xl\"\n            data-testid=\"contact-form-container\"\n          >\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"contact-form\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Your name\"\n                            {...field}\n                            className=\"bg-input border-border\"\n                            data-testid=\"input-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"email\"\n                            placeholder=\"your.email@example.com\"\n                            {...field}\n                            className=\"bg-input border-border\"\n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"service\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Interested In</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-service\">\n                            <SelectValue placeholder=\"Select a service\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"web-development\">Website Development</SelectItem>\n                          <SelectItem value=\"app-development\">App Development</SelectItem>\n                          <SelectItem value=\"automation\">Automation Solutions</SelectItem>\n                          <SelectItem value=\"consulting\">Consulting</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"budget\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Budget Range</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-budget\">\n                            <SelectValue placeholder=\"Select budget range\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"5k-10k\">$5,000 - $10,000</SelectItem>\n                          <SelectItem value=\"10k-25k\">$10,000 - $25,000</SelectItem>\n                          <SelectItem value=\"25k-50k\">$25,000 - $50,000</SelectItem>\n                          <SelectItem value=\"50k+\">$50,000+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Project Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Tell us about your project...\"\n                          rows={4}\n                          {...field}\n                          className=\"bg-input border-border\"\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"flex-1 bg-primary hover:bg-primary/80 text-primary-foreground\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    onClick={handleWhatsAppClick}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                    data-testid=\"button-whatsapp\"\n                  >\n                    <MessageCircle className=\"mr-2 h-4 w-4\" />\n                    WhatsApp\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </motion.div>\n\n          {/* Contact Info */}\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"space-y-8\"\n            data-testid=\"contact-info\"\n          >\n            <Card className=\"glass-card\" data-testid=\"contact-email\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-primary/20 p-3 rounded-lg\">\n                    <Mail className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Email</h3>\n                    <p className=\"text-muted-foreground\">kolashankar113@gmail.com</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\" data-testid=\"contact-phone\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-accent/20 p-3 rounded-lg\">\n                    <Phone className=\"h-6 w-6 text-accent\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Phone</h3>\n                    <p className=\"text-muted-foreground\">+91 86880 09537</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\" data-testid=\"contact-location\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-primary/20 p-3 rounded-lg\">\n                    <MapPin className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Location</h3>\n                    <p className=\"text-muted-foreground\">Kadapa, AndhraPradesh, India</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\" data-testid=\"social-media\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Follow Us</h3>\n                <div className=\"flex space-x-4\">\n                  <button className=\"bg-primary/20 p-3 rounded-lg hover:bg-primary/30 transition-colors\" data-testid=\"social-twitter\">\n                    <Twitter className=\"h-5 w-5 text-primary\" />\n                  </button>\n                  <button className=\"bg-accent/20 p-3 rounded-lg hover:bg-accent/30 transition-colors\" data-testid=\"social-linkedin\">\n                    <Linkedin className=\"h-5 w-5 text-accent\" />\n                  </button>\n                  <button className=\"bg-primary/20 p-3 rounded-lg hover:bg-primary/30 transition-colors\" data-testid=\"social-github\">\n                    <Github className=\"h-5 w-5 text-primary\" />\n                  </button>\n                  <button className=\"bg-accent/20 p-3 rounded-lg hover:bg-accent/30 transition-colors\" data-testid=\"social-instagram\">\n                    <Instagram className=\"h-5 w-5 text-accent\" />\n                  </button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13110},"client/src/components/Footer.tsx":{"content":"import { Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport default function Footer() {\n  const scrollToSection = (sectionId: string) => {\n    const section = document.getElementById(sectionId);\n    if (section) {\n      section.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <footer className=\"bg-card py-12\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div data-testid=\"footer-brand\">\n            <h3 className=\"text-2xl font-bold masked-text mb-4\">LOVGOL</h3>\n            <p className=\"text-muted-foreground\">\n              Transforming ideas into digital reality with cutting-edge technology and creative design.\n            </p>\n          </div>\n          \n          <div data-testid=\"footer-services\">\n            <h4 className=\"font-semibold mb-4\">Services</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <button \n                  onClick={() => scrollToSection('services')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-web-dev\"\n                >\n                  Website Development\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('services')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-app-dev\"\n                >\n                  App Development\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('services')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-automation\"\n                >\n                  Automation\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('contact')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-consulting\"\n                >\n                  Consulting\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <div data-testid=\"footer-company\">\n            <h4 className=\"font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <button \n                  onClick={() => scrollToSection('about')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-about\"\n                >\n                  About\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('clients')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-clients\"\n                >\n                  Clients\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('contact')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-contact\"\n                >\n                  Contact\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => scrollToSection('contact')} \n                  className=\"hover:text-primary transition-colors\"\n                  data-testid=\"footer-link-careers\"\n                >\n                  Careers\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <div data-testid=\"footer-connect\">\n            <h4 className=\"font-semibold mb-4\">Connect</h4>\n            <div className=\"flex space-x-4\">\n              <button \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"footer-social-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </button>\n              <button \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"footer-social-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </button>\n              <button \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"footer-social-github\"\n              >\n                <Github className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\" data-testid=\"footer-copyright\">\n          <p>&copy; 2024 LOVGOL. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4948},"client/src/components/Hero.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronDown } from \"lucide-react\";\n\nexport default function Hero() {\n  const [offsetY, setOffsetY] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => setOffsetY(window.pageYOffset);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const scrollToServices = () => {\n    const servicesSection = document.getElementById('services');\n    if (servicesSection) {\n      servicesSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const scrollToContact = () => {\n    const contactSection = document.getElementById('contact');\n    if (contactSection) {\n      contactSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section \n      id=\"home\" \n      className=\"min-h-screen flex items-center justify-center relative overflow-hidden\"\n      data-testid=\"hero-section\"\n    >\n      {/* Parallax Background */}\n      <div \n        className=\"absolute inset-0 z-0\"\n        style={{\n          backgroundImage: 'url(https://pixabay.com/get/g6fe653a3f50d89d6b6d01ba22d868dca664379543f416234687d21ae225108b21471bbb3b3d8654816f462a27d0ed819657234187814d175872d0787fb24ae76_1280.jpg)',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          transform: `translateY(${offsetY * 0.5}px)`,\n        }}\n      />\n      <div className=\"absolute inset-0 hero-gradient z-10\" />\n      \n      <div className=\"relative z-20 text-center px-4 sm:px-6 lg:px-8\">\n        <div className=\"animate-fade-in-up opacity-0\" style={{ animationDelay: '0.2s' }}>\n          <h1 \n            className=\"hero-text text-6xl md:text-8xl font-black mb-6 masked-text leading-tight\"\n            data-testid=\"hero-title\"\n          >\n            LOVGOL\n          </h1>\n          <p \n            className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto leading-relaxed\"\n            data-testid=\"hero-subtitle\"\n          >\n            Crafting Digital Experiences That Transform Ideas Into Reality\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              onClick={scrollToContact}\n              className=\"bg-primary hover:bg-primary/80 text-primary-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg\"\n              data-testid=\"button-start-project\"\n            >\n              Start Your Project\n            </Button>\n            <Button\n              onClick={scrollToServices}\n              variant=\"outline\"\n              className=\"glass-card hover:bg-white/10 text-foreground px-8 py-4 rounded-lg font-semibold transition-all duration-300\"\n              data-testid=\"button-view-work\"\n            >\n              View Our Work\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Scroll Indicator */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20 animate-bounce\">\n        <ChevronDown className=\"h-8 w-8 text-muted-foreground\" data-testid=\"scroll-indicator\" />\n      </div>\n    </section>\n  );\n}\n","size_bytes":3228},"client/src/components/ImageSequenceScroll.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface ImageSequenceScrollProps {\n  images: string[];\n  className?: string;\n  triggerHeight?: number;\n}\n\nexport default function ImageSequenceScroll({ \n  images, \n  className = \"\", \n  triggerHeight = 400 \n}: ImageSequenceScrollProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [currentFrame, setCurrentFrame] = useState(0);\n  const [imagesLoaded, setImagesLoaded] = useState(false);\n\n  useEffect(() => {\n    // Preload all images\n    const imagePromises = images.map((src) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = resolve;\n        img.onerror = reject;\n        img.src = src;\n      });\n    });\n\n    Promise.all(imagePromises)\n      .then(() => setImagesLoaded(true))\n      .catch((err) => console.error(\"Failed to load sequence images:\", err));\n  }, [images]);\n\n  useEffect(() => {\n    if (!imagesLoaded || !containerRef.current) return;\n\n    const handleScroll = () => {\n      const container = containerRef.current;\n      if (!container) return;\n\n      const rect = container.getBoundingClientRect();\n      const containerTop = rect.top;\n      const containerHeight = rect.height;\n      const windowHeight = window.innerHeight;\n\n      // Calculate scroll progress within the trigger area\n      const scrollStart = containerTop - windowHeight;\n      const scrollEnd = containerTop - windowHeight + triggerHeight;\n      const scrollProgress = Math.min(Math.max((scrollStart * -1) / (scrollEnd - scrollStart), 0), 1);\n\n      // Map scroll progress to frame index\n      const frameIndex = Math.floor(scrollProgress * (images.length - 1));\n      setCurrentFrame(Math.max(0, Math.min(frameIndex, images.length - 1)));\n    };\n\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\n    handleScroll(); // Call once to set initial frame\n\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [imagesLoaded, images.length, triggerHeight]);\n\n  if (!imagesLoaded) {\n    return (\n      <div className={`flex items-center justify-center ${className}`} style={{ height: triggerHeight }}>\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      ref={containerRef} \n      className={`sticky top-1/2 transform -translate-y-1/2 ${className}`}\n      style={{ height: triggerHeight }}\n      data-testid=\"image-sequence-container\"\n    >\n      <div className=\"relative w-full h-full\">\n        {images.map((src, index) => (\n          <motion.img\n            key={index}\n            src={src}\n            alt={`Sequence frame ${index + 1}`}\n            className=\"absolute inset-0 w-full h-full object-cover rounded-lg\"\n            style={{ \n              opacity: index === currentFrame ? 1 : 0,\n              zIndex: index === currentFrame ? 1 : 0\n            }}\n            animate={{ \n              opacity: index === currentFrame ? 1 : 0 \n            }}\n            transition={{ duration: 0.1 }}\n            data-testid={`sequence-frame-${index}`}\n          />\n        ))}\n      </div>\n      \n      {/* Progress indicator */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 px-3 py-1 rounded-full\">\n        <span className=\"text-white text-sm\" data-testid=\"frame-counter\">\n          {currentFrame + 1} / {images.length}\n        </span>\n      </div>\n    </div>\n  );\n}","size_bytes":3498},"client/src/components/InquiryModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { X, Send, MessageCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { openWhatsApp } from \"@/lib/whatsapp\";\nimport { useEmailJS } from \"@/hooks/useEmailJS\";\n\nconst inquiryFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  service: z.string().min(1, \"Service is required\"),\n  details: z.string().min(1, \"Project details are required\"),\n});\n\ntype InquiryFormData = z.infer<typeof inquiryFormSchema>;\n\ninterface InquiryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialService: string;\n}\n\nexport default function InquiryModal({ isOpen, onClose, initialService }: InquiryModalProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { sendEmail } = useEmailJS();\n\n  const form = useForm<InquiryFormData>({\n    resolver: zodResolver(inquiryFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      service: initialService,\n      details: \"\",\n    },\n  });\n\n  // Update service field when initialService changes\n  useEffect(() => {\n    if (initialService) {\n      form.setValue(\"service\", initialService);\n    }\n  }, [initialService, form]);\n\n  const inquiryMutation = useMutation({\n    mutationFn: async (data: InquiryFormData) => {\n      // Save to database\n      await apiRequest(\"POST\", \"/api/inquiry-submissions\", data);\n      \n      // Send email via EmailJS\n      await sendEmail({\n        from_name: data.name,\n        from_email: data.email,\n        message: `Project Inquiry for ${data.service}\\n\\nDetails: ${data.details}`,\n        service: data.service,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry sent!\",\n        description: \"Thank you for your inquiry. We'll contact you shortly.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send inquiry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    },\n  });\n\n  const onSubmit = (data: InquiryFormData) => {\n    setIsSubmitting(true);\n    inquiryMutation.mutate(data);\n  };\n\n  const handleWhatsAppClick = () => {\n    const formData = form.getValues();\n    const message = `Hi LOVGOL,\\n\\nProject Inquiry:\\nName: ${formData.name || 'Not specified'}\\nEmail: ${formData.email || 'Not specified'}\\nService: ${formData.service || 'Not specified'}\\nDetails: ${formData.details || 'Not specified'}`;\n    openWhatsApp(message);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"max-w-lg glass-card border-border\"\n        data-testid=\"inquiry-modal\"\n      >\n        <DialogHeader>\n          <div className=\"flex justify-between items-start\">\n            <DialogTitle \n              className=\"text-2xl font-bold\"\n              data-testid=\"inquiry-modal-title\"\n            >\n              Project Inquiry\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-inquiry-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"inquiry-form\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Your Name\"\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-inquiry-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"Your Email\"\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-inquiry-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"service\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Service</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      readOnly\n                      className=\"bg-muted border-border\"\n                      data-testid=\"input-inquiry-service\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"details\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Project Details</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Project details...\"\n                      rows={4}\n                      {...field}\n                      className=\"bg-input border-border\"\n                      data-testid=\"textarea-inquiry-details\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex gap-4\">\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 bg-primary hover:bg-primary/80\"\n                data-testid=\"button-send-inquiry\"\n              >\n                <Send className=\"mr-2 h-4 w-4\" />\n                {isSubmitting ? \"Sending...\" : \"Send Inquiry\"}\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={handleWhatsAppClick}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                data-testid=\"button-whatsapp-inquiry\"\n              >\n                <MessageCircle className=\"mr-2 h-4 w-4\" />\n                WhatsApp\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7455},"client/src/components/Navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const scrollToSection = (sectionId: string) => {\n    const section = document.getElementById(sectionId);\n    if (section) {\n      section.scrollIntoView({ behavior: \"smooth\" });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav \n      className={`fixed top-0 w-full z-50 transition-all duration-300 ${\n        isScrolled ? 'glass-card' : 'bg-transparent'\n      }`}\n      data-testid=\"navigation\"\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <h1 className=\"text-2xl font-bold masked-text\" data-testid=\"logo\">LOVGOL</h1>\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              <button\n                onClick={() => scrollToSection('home')}\n                className=\"text-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-home\"\n              >\n                Home\n              </button>\n              <button\n                onClick={() => scrollToSection('about')}\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-about\"\n              >\n                About\n              </button>\n              <button\n                onClick={() => scrollToSection('services')}\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-services\"\n              >\n                Services\n              </button>\n              <button\n                onClick={() => scrollToSection('clients')}\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-clients\"\n              >\n                Clients\n              </button>\n              <button\n                onClick={() => scrollToSection('contact')}\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-contact\"\n              >\n                Contact\n              </button>\n              <button\n                onClick={() => window.location.href = '/blog'}\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-200\"\n                data-testid=\"nav-blog\"\n              >\n                Blog\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"md:hidden\">\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"text-foreground\"\n              data-testid=\"mobile-menu-toggle\"\n            >\n              {isMobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden\" data-testid=\"mobile-menu\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3 glass-card\">\n              <button\n                onClick={() => scrollToSection('home')}\n                className=\"block px-3 py-2 text-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-home\"\n              >\n                Home\n              </button>\n              <button\n                onClick={() => scrollToSection('about')}\n                className=\"block px-3 py-2 text-muted-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-about\"\n              >\n                About\n              </button>\n              <button\n                onClick={() => scrollToSection('services')}\n                className=\"block px-3 py-2 text-muted-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-services\"\n              >\n                Services\n              </button>\n              <button\n                onClick={() => scrollToSection('clients')}\n                className=\"block px-3 py-2 text-muted-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-clients\"\n              >\n                Clients\n              </button>\n              <button\n                onClick={() => scrollToSection('contact')}\n                className=\"block px-3 py-2 text-muted-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-contact\"\n              >\n                Contact\n              </button>\n              <button\n                onClick={() => window.location.href = '/blog'}\n                className=\"block px-3 py-2 text-muted-foreground hover:text-primary w-full text-left\"\n                data-testid=\"mobile-nav-blog\"\n              >\n                Blog\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5469},"client/src/components/ServiceModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, MessageCircle } from \"lucide-react\";\nimport type { ServicePreview } from \"@shared/schema\";\nimport { openWhatsApp } from \"@/lib/whatsapp\";\n\ninterface ServiceModalProps {\n  service: ServicePreview | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onInquiryClick: (serviceName: string) => void;\n}\n\nexport default function ServiceModal({ service, isOpen, onClose, onInquiryClick }: ServiceModalProps) {\n  if (!service) return null;\n\n  const handleWhatsAppClick = () => {\n    const message = `Hi LOVGOL,\\n\\nI'm interested in your ${service.title} service. Can we discuss this further?`;\n    openWhatsApp(message);\n  };\n\n  const handleInquiryClick = () => {\n    onInquiryClick(service.title);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent \n        className=\"max-w-2xl glass-card border-border\"\n        data-testid=\"service-modal\"\n      >\n        <DialogHeader>\n          <div className=\"flex justify-between items-start\">\n            <DialogTitle \n              className=\"text-2xl font-bold\"\n              data-testid=\"modal-service-title\"\n            >\n              {service.title}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {service.imageUrl && (\n            <img\n              src={service.imageUrl}\n              alt={service.title}\n              className=\"w-full h-48 object-cover rounded-lg\"\n              data-testid=\"modal-service-image\"\n            />\n          )}\n          \n          <div>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Badge variant=\"secondary\" data-testid=\"modal-service-category\">\n                {service.category}\n              </Badge>\n              <Badge variant=\"outline\" data-testid=\"modal-service-technology\">\n                {service.technology}\n              </Badge>\n              {service.tags.map((tag, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"bg-primary/20 text-primary\"\n                  data-testid={`modal-service-tag-${index}`}\n                >\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n            \n            <p \n              className=\"text-muted-foreground mb-6\"\n              data-testid=\"modal-service-description\"\n            >\n              {service.description}\n            </p>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\" data-testid=\"modal-features-title\">\n                Features Include:\n              </h4>\n              <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\" data-testid=\"modal-features-list\">\n                <li>Responsive design across all devices</li>\n                <li>Modern UI/UX best practices</li>\n                <li>Performance optimization</li>\n                <li>SEO-friendly implementation</li>\n                <li>Ongoing support and maintenance</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-4 pt-4\">\n            <Button\n              onClick={handleInquiryClick}\n              className=\"flex-1 bg-primary hover:bg-primary/80\"\n              data-testid=\"button-start-inquiry\"\n            >\n              Start Project Inquiry\n            </Button>\n            <Button\n              onClick={handleWhatsAppClick}\n              className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n              data-testid=\"button-whatsapp-service\"\n            >\n              <MessageCircle className=\"mr-2 h-4 w-4\" />\n              WhatsApp\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4174},"client/src/components/Services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport ImageSequenceScroll from \"./ImageSequenceScroll\";\nimport type { ServicePreview } from \"@shared/schema\";\n\ninterface ServicesProps {\n  onServiceClick: (service: ServicePreview) => void;\n}\n\nexport default function Services({ onServiceClick }: ServicesProps) {\n  const [activeCategory, setActiveCategory] = useState<string>(\"all\");\n  const [activeTechnology, setActiveTechnology] = useState<string>(\"\");\n\n  const { data: allServices = [], isLoading } = useQuery({\n    queryKey: [\"/api/service-previews\"],\n  });\n\n  const getFilteredServices = () => {\n    if (activeTechnology) {\n      return allServices.filter((service: ServicePreview) => service.technology === activeTechnology);\n    }\n    if (activeCategory === \"all\") {\n      return allServices;\n    }\n    return allServices.filter((service: ServicePreview) => service.category === activeCategory);\n  };\n\n  const filteredServices = getFilteredServices();\n\n  const categories = [\n    { id: \"all\", label: \"All Services\" },\n    { id: \"web\", label: \"Website Development\" },\n    { id: \"app\", label: \"App Development\" },\n    { id: \"automation\", label: \"Automations\" },\n  ];\n\n  const technologies = {\n    web: [\n      { id: \"mern\", label: \"MERN Stack\" },\n      { id: \"php\", label: \"PHP\" },\n      { id: \"wordpress\", label: \"WordPress\" },\n    ],\n    app: [\n      { id: \"react-native\", label: \"React Native\" },\n      { id: \"flutter\", label: \"Flutter\" },\n    ],\n    automation: [\n      { id: \"python\", label: \"Python\" },\n      { id: \"nodejs\", label: \"Node.js\" },\n    ],\n  };\n\n  const handleCategoryChange = (categoryId: string) => {\n    setActiveCategory(categoryId);\n    setActiveTechnology(\"\");\n  };\n\n  const handleTechnologyChange = (technologyId: string) => {\n    setActiveTechnology(technologyId);\n  };\n\n  if (isLoading) {\n    return (\n      <section id=\"services\" className=\"py-20 bg-background\" data-testid=\"services-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\" data-testid=\"loading-services\">Loading services...</div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-background\" data-testid=\"services-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-6xl font-black mb-6 masked-text leading-tight\" data-testid=\"services-title\">\n            Our Services\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"services-description\">\n            From concept to deployment, we offer comprehensive digital solutions\n          </p>\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"mb-12\">\n          <div className=\"flex flex-wrap justify-center gap-4 mb-8\">\n            {categories.map((category) => (\n              <Button\n                key={category.id}\n                onClick={() => handleCategoryChange(category.id)}\n                variant={activeCategory === category.id ? \"default\" : \"outline\"}\n                className={`px-6 py-3 rounded-full glass-card transition-all duration-300 ${\n                  activeCategory === category.id ? \"bg-primary text-primary-foreground\" : \"\"\n                }`}\n                data-testid={`filter-${category.id}`}\n              >\n                {category.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Technology Sub-filters */}\n          {activeCategory !== \"all\" && technologies[activeCategory as keyof typeof technologies] && (\n            <div className=\"text-center\">\n              <div className=\"flex flex-wrap justify-center gap-2\">\n                {technologies[activeCategory as keyof typeof technologies].map((tech) => (\n                  <Button\n                    key={tech.id}\n                    onClick={() => handleTechnologyChange(tech.id)}\n                    variant={activeTechnology === tech.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className={`px-4 py-2 rounded-lg glass-card text-sm ${\n                      activeTechnology === tech.id ? \"bg-primary text-primary-foreground\" : \"\"\n                    }`}\n                    data-testid={`sub-filter-${tech.id}`}\n                  >\n                    {tech.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Image Sequence Demo Section */}\n        <div className=\"mb-20\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-4xl font-bold mb-4 masked-text\">See Our Work in Action</h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Scroll down to see our development process unfold step by step\n            </p>\n          </div>\n          \n          <div style={{ height: \"200vh\" }} className=\"relative\">\n            <ImageSequenceScroll\n              images={[\n                \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop\",\n                \"https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800&h=600&fit=crop\", \n                \"https://images.unsplash.com/photo-1557804506-669a67965ba0?w=800&h=600&fit=crop\",\n                \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800&h=600&fit=crop\",\n                \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=600&fit=crop\"\n              ]}\n              className=\"w-full max-w-4xl mx-auto\"\n              triggerHeight={600}\n            />\n          </div>\n        </div>\n\n        {/* Service Cards */}\n        {filteredServices.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-services\">\n            No services found for the selected filters.\n          </div>\n        ) : (\n          <motion.div \n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n            layout\n            data-testid=\"services-grid\"\n          >\n            {filteredServices.map((service: ServicePreview) => (\n              <motion.div\n                key={service.id}\n                layout\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                whileHover={{ y: -10, scale: 1.02 }}\n                transition={{ duration: 0.3 }}\n                className=\"service-card glass-card rounded-xl overflow-hidden cursor-pointer relative group\"\n                onClick={() => onServiceClick(service)}\n                data-testid={`service-card-${service.id}`}\n              >\n                {service.imageUrl && (\n                  <img\n                    src={service.imageUrl}\n                    alt={service.title}\n                    className=\"w-full h-48 object-cover\"\n                    data-testid={`service-image-${service.id}`}\n                  />\n                )}\n                <div className=\"p-6\">\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    {service.tags.slice(0, 2).map((tag, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"bg-primary/20 text-primary text-xs px-2 py-1 rounded\"\n                        data-testid={`service-tag-${service.id}-${index}`}\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\" data-testid={`service-title-${service.id}`}>\n                    {service.title}\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm\" data-testid={`service-description-${service.id}`}>\n                    {service.description}\n                  </p>\n                  \n                  {/* Case Study Link Overlay */}\n                  {(service.technology === \"mern\" || service.technology === \"react-native\" || service.technology === \"python\") && (\n                    <div className=\"absolute inset-0 bg-black/80 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          const caseStudyId = service.technology === \"mern\" ? \"ecommerce-platform\" :\n                                            service.technology === \"react-native\" ? \"mobile-fitness-app\" : \n                                            \"automation-pipeline\";\n                          window.location.href = `/case-study/${caseStudyId}`;\n                        }}\n                        className=\"bg-primary hover:bg-primary/80 text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors\"\n                        data-testid={`case-study-link-${service.id}`}\n                      >\n                        View Case Study\n                      </button>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":9489},"client/src/components/TestimonialsCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Testimonial {\n  id: number;\n  name: string;\n  role: string;\n  company: string;\n  image: string;\n  text: string;\n  rating: number;\n}\n\ninterface TestimonialsCarouselProps {\n  testimonials: Testimonial[];\n  autoPlay?: boolean;\n  interval?: number;\n}\n\nexport default function TestimonialsCarousel({ \n  testimonials, \n  autoPlay = true, \n  interval = 5000 \n}: TestimonialsCarouselProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(autoPlay);\n\n  const nextTestimonial = () => {\n    setCurrentIndex((prev) => (prev + 1) % testimonials.length);\n  };\n\n  const prevTestimonial = () => {\n    setCurrentIndex((prev) => (prev - 1 + testimonials.length) % testimonials.length);\n  };\n\n  const goToTestimonial = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  // Auto-play functionality\n  useEffect(() => {\n    if (!isAutoPlaying) return;\n\n    const timer = setInterval(() => {\n      nextTestimonial();\n    }, interval);\n\n    return () => clearInterval(timer);\n  }, [isAutoPlaying, interval, currentIndex]);\n\n  // Pause auto-play on hover\n  const handleMouseEnter = () => setIsAutoPlaying(false);\n  const handleMouseLeave = () => setIsAutoPlaying(autoPlay);\n\n  return (\n    <div \n      className=\"relative w-full max-w-4xl mx-auto\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      data-testid=\"testimonials-carousel\"\n    >\n      <div className=\"relative h-96 overflow-hidden rounded-xl glass-card\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentIndex}\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -300 }}\n            transition={{ duration: 0.5, ease: \"easeInOut\" }}\n            className=\"absolute inset-0 flex items-center justify-center p-8\"\n            data-testid={`testimonial-${currentIndex}`}\n          >\n            <div className=\"text-center\">\n              {/* Profile Image */}\n              <motion.img\n                src={testimonials[currentIndex].image}\n                alt={testimonials[currentIndex].name}\n                className=\"w-20 h-20 rounded-full mx-auto mb-6 object-cover border-4 border-primary/20\"\n                initial={{ scale: 0.8, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ delay: 0.2 }}\n                data-testid={`testimonial-image-${currentIndex}`}\n              />\n\n              {/* Rating Stars */}\n              <motion.div \n                className=\"flex justify-center mb-4\"\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3 }}\n                data-testid={`testimonial-rating-${currentIndex}`}\n              >\n                {[...Array(5)].map((_, i) => (\n                  <span\n                    key={i}\n                    className={`text-2xl ${\n                      i < testimonials[currentIndex].rating\n                        ? \"text-yellow-400\"\n                        : \"text-gray-600\"\n                    }`}\n                  >\n                    ★\n                  </span>\n                ))}\n              </motion.div>\n\n              {/* Testimonial Text */}\n              <motion.blockquote\n                className=\"text-xl md:text-2xl font-light italic text-foreground mb-6 leading-relaxed max-w-3xl\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.4 }}\n                data-testid={`testimonial-text-${currentIndex}`}\n              >\n                \"{testimonials[currentIndex].text}\"\n              </motion.blockquote>\n\n              {/* Author Info */}\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.5 }}\n                data-testid={`testimonial-author-${currentIndex}`}\n              >\n                <div className=\"font-semibold text-lg text-foreground\">\n                  {testimonials[currentIndex].name}\n                </div>\n                <div className=\"text-muted-foreground\">\n                  {testimonials[currentIndex].role} at {testimonials[currentIndex].company}\n                </div>\n              </motion.div>\n            </div>\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Navigation Arrows */}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute left-4 top-1/2 transform -translate-y-1/2 glass-card hover:bg-primary/20 transition-colors\"\n          onClick={prevTestimonial}\n          data-testid=\"testimonial-prev-button\"\n        >\n          <ChevronLeft className=\"h-6 w-6\" />\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute right-4 top-1/2 transform -translate-y-1/2 glass-card hover:bg-primary/20 transition-colors\"\n          onClick={nextTestimonial}\n          data-testid=\"testimonial-next-button\"\n        >\n          <ChevronRight className=\"h-6 w-6\" />\n        </Button>\n      </div>\n\n      {/* Dot Indicators */}\n      <div className=\"flex justify-center mt-6 space-x-2\" data-testid=\"testimonial-indicators\">\n        {testimonials.map((_, index) => (\n          <button\n            key={index}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === currentIndex\n                ? \"bg-primary scale-125\"\n                : \"bg-muted-foreground/30 hover:bg-muted-foreground/50\"\n            }`}\n            onClick={() => goToTestimonial(index)}\n            data-testid={`testimonial-indicator-${index}`}\n          />\n        ))}\n      </div>\n\n      {/* Progress Bar */}\n      {isAutoPlaying && (\n        <div className=\"mt-4 w-full bg-muted-foreground/20 rounded-full h-1\">\n          <motion.div\n            className=\"bg-primary h-1 rounded-full\"\n            initial={{ width: \"0%\" }}\n            animate={{ width: \"100%\" }}\n            transition={{ duration: interval / 1000, ease: \"linear\" }}\n            key={`progress-${currentIndex}`}\n            data-testid=\"testimonial-progress-bar\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6494},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useEmailJS.tsx":{"content":"import { useState } from \"react\";\nimport emailjs from \"@emailjs/browser\";\n\ninterface EmailData {\n  from_name: string;\n  from_email: string;\n  message: string;\n  service?: string;\n  budget?: string;\n}\n\n// EmailJS configuration - these would typically come from environment variables\nconst EMAILJS_SERVICE_ID = import.meta.env.VITE_EMAILJS_SERVICE_ID || \"service_demo\";\nconst EMAILJS_TEMPLATE_ID = import.meta.env.VITE_EMAILJS_TEMPLATE_ID || \"template_demo\";\nconst EMAILJS_PUBLIC_KEY = import.meta.env.VITE_EMAILJS_PUBLIC_KEY || \"demo_key\";\n\nexport function useEmailJS() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const sendEmail = async (data: EmailData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Initialize EmailJS if not already done\n      if (!emailjs.init) {\n        emailjs.init(EMAILJS_PUBLIC_KEY);\n      }\n\n      const templateParams = {\n        from_name: data.from_name,\n        from_email: data.from_email,\n        message: data.message,\n        service: data.service || \"Not specified\",\n        budget: data.budget || \"Not specified\",\n        to_email: \"kolashankar113@gmail.com\", // Company email\n      };\n\n      const response = await emailjs.send(\n        EMAILJS_SERVICE_ID,\n        EMAILJS_TEMPLATE_ID,\n        templateParams,\n        EMAILJS_PUBLIC_KEY\n      );\n\n      console.log(\"Email sent successfully:\", response);\n      return { success: true, response };\n    } catch (err) {\n      console.error(\"EmailJS error:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Failed to send email\";\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    sendEmail,\n    isLoading,\n    error,\n  };\n}\n","size_bytes":1804},"client/src/hooks/useScrollAnimations.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\nexport function useScrollAnimations() {\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    const animateElements = document.querySelectorAll('.animate-fade-in-up, .animate-slide-in-left, .animate-slide-in-right');\n    \n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('opacity-100');\n            entry.target.classList.remove('opacity-0');\n            observerRef.current?.unobserve(entry.target);\n          }\n        });\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px',\n      }\n    );\n\n    animateElements.forEach((el) => {\n      observerRef.current?.observe(el);\n    });\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  return observerRef.current;\n}\n","size_bytes":938},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/whatsapp.ts":{"content":"export function openWhatsApp(message: string = \"\") {\n  const phoneNumber = process.env.VITE_WHATSAPP_NUMBER || \"+1234567890\";\n  const encodedMessage = encodeURIComponent(message || \"Hi, I'm interested in your services!\");\n  const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;\n  \n  window.open(whatsappUrl, \"_blank\");\n}\n","size_bytes":342},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trash2, Edit, Plus } from \"lucide-react\";\nimport AdminServiceForm from \"@/components/AdminServiceForm\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ServicePreview } from \"@shared/schema\";\n\nexport default function Admin() {\n  const [editingService, setEditingService] = useState<ServicePreview | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: servicePreviews = [], isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/service-previews\"],\n  });\n\n  const { data: contactSubmissions = [], isLoading: contactsLoading } = useQuery({\n    queryKey: [\"/api/contact-submissions\"],\n  });\n\n  const { data: inquirySubmissions = [], isLoading: inquiriesLoading } = useQuery({\n    queryKey: [\"/api/inquiry-submissions\"],\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/service-previews/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-previews\"] });\n      toast({\n        title: \"Service deleted\",\n        description: \"Service preview has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete service preview.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this service preview?\")) {\n      deleteServiceMutation.mutate(id);\n    }\n  };\n\n  const handleEdit = (service: ServicePreview) => {\n    setEditingService(service);\n    setShowForm(true);\n  };\n\n  const handleAdd = () => {\n    setEditingService(null);\n    setShowForm(true);\n  };\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    setEditingService(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-8\" data-testid=\"admin-page\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-4xl font-bold masked-text\" data-testid=\"text-admin-title\">LOVGOL Admin Panel</h1>\n          <Button \n            onClick={handleAdd} \n            className=\"bg-primary hover:bg-primary/80\"\n            data-testid=\"button-add-service\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Service\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"services\" className=\"space-y-6\">\n          <TabsList className=\"glass-card\">\n            <TabsTrigger value=\"services\" data-testid=\"tab-services\">Services ({servicePreviews.length})</TabsTrigger>\n            <TabsTrigger value=\"contacts\" data-testid=\"tab-contacts\">Contact Submissions ({contactSubmissions.length})</TabsTrigger>\n            <TabsTrigger value=\"inquiries\" data-testid=\"tab-inquiries\">Inquiries ({inquirySubmissions.length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            {servicesLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-services\">Loading services...</div>\n            ) : servicePreviews.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-services\">\n                No service previews found. Add your first service to get started.\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {servicePreviews.map((service: ServicePreview) => (\n                  <Card key={service.id} className=\"glass-card\" data-testid={`card-service-${service.id}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg\" data-testid={`text-service-title-${service.id}`}>\n                          {service.title}\n                        </CardTitle>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEdit(service)}\n                            data-testid={`button-edit-${service.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDelete(service.id)}\n                            data-testid={`button-delete-${service.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Badge variant=\"secondary\" data-testid={`badge-category-${service.id}`}>\n                          {service.category}\n                        </Badge>\n                        <Badge variant=\"outline\" data-testid={`badge-technology-${service.id}`}>\n                          {service.technology}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {service.imageUrl && (\n                        <img\n                          src={service.imageUrl}\n                          alt={service.title}\n                          className=\"w-full h-32 object-cover rounded-lg mb-4\"\n                          data-testid={`img-service-${service.id}`}\n                        />\n                      )}\n                      <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`text-description-${service.id}`}>\n                        {service.description}\n                      </p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {service.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`tag-${service.id}-${index}`}>\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"contacts\" className=\"space-y-6\">\n            {contactsLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-contacts\">Loading contact submissions...</div>\n            ) : contactSubmissions.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-contacts\">\n                No contact submissions found.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {contactSubmissions.map((contact: any, index: number) => (\n                  <Card key={contact.id} className=\"glass-card\" data-testid={`card-contact-${index}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg\" data-testid={`text-contact-name-${index}`}>\n                          {contact.name}\n                        </CardTitle>\n                        <Badge variant=\"outline\" data-testid={`badge-contact-date-${index}`}>\n                          {new Date(contact.submittedAt).toLocaleDateString()}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      <p data-testid={`text-contact-email-${index}`}>\n                        <strong>Email:</strong> {contact.email}\n                      </p>\n                      {contact.service && (\n                        <p data-testid={`text-contact-service-${index}`}>\n                          <strong>Service:</strong> {contact.service}\n                        </p>\n                      )}\n                      {contact.budget && (\n                        <p data-testid={`text-contact-budget-${index}`}>\n                          <strong>Budget:</strong> {contact.budget}\n                        </p>\n                      )}\n                      <p data-testid={`text-contact-message-${index}`}>\n                        <strong>Message:</strong> {contact.message}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"inquiries\" className=\"space-y-6\">\n            {inquiriesLoading ? (\n              <div className=\"text-center py-8\" data-testid=\"loading-inquiries\">Loading inquiries...</div>\n            ) : inquirySubmissions.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-inquiries\">\n                No inquiry submissions found.\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {inquirySubmissions.map((inquiry: any, index: number) => (\n                  <Card key={inquiry.id} className=\"glass-card\" data-testid={`card-inquiry-${index}`}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-lg\" data-testid={`text-inquiry-name-${index}`}>\n                          {inquiry.name}\n                        </CardTitle>\n                        <Badge variant=\"outline\" data-testid={`badge-inquiry-date-${index}`}>\n                          {new Date(inquiry.submittedAt).toLocaleDateString()}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      <p data-testid={`text-inquiry-email-${index}`}>\n                        <strong>Email:</strong> {inquiry.email}\n                      </p>\n                      <p data-testid={`text-inquiry-service-${index}`}>\n                        <strong>Service:</strong> {inquiry.service}\n                      </p>\n                      <p data-testid={`text-inquiry-details-${index}`}>\n                        <strong>Details:</strong> {inquiry.details}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {showForm && (\n          <AdminServiceForm\n            service={editingService}\n            onSuccess={handleFormSuccess}\n            onCancel={() => setShowForm(false)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11267},"client/src/pages/blog-post.tsx":{"content":"import { useRoute } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { ArrowLeft, Calendar, Clock, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function BlogPostPage() {\n  const [, params] = useRoute(\"/blog/:slug\");\n  const slug = params?.slug;\n\n  const { data: post, isLoading, error } = useQuery({\n    queryKey: ['/api/blog-posts/slug', slug],\n    queryFn: async () => {\n      const response = await fetch(`/api/blog-posts/slug/${slug}`);\n      if (!response.ok) {\n        throw new Error('Post not found');\n      }\n      return response.json();\n    },\n    enabled: !!slug,\n  });\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return \"No date\";\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\", \n      day: \"numeric\"\n    });\n  };\n\n  const getReadingTime = (content: string) => {\n    const wordsPerMinute = 200;\n    const wordCount = content.split(/\\s+/).length;\n    const minutes = Math.ceil(wordCount / wordsPerMinute);\n    return `${minutes} min read`;\n  };\n\n  const handleShare = async () => {\n    if (navigator.share && post) {\n      try {\n        await navigator.share({\n          title: post.title,\n          text: post.excerpt,\n          url: window.location.href,\n        });\n      } catch (err) {\n        // Fallback to copying URL\n        navigator.clipboard.writeText(window.location.href);\n      }\n    } else {\n      // Fallback to copying URL\n      navigator.clipboard.writeText(window.location.href);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold mb-4\">Post Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The blog post you're looking for doesn't exist.</p>\n          <Button onClick={() => window.location.href = '/blog'}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Blog\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const blogPost = post as BlogPost;\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"blog-post-page\">\n      {/* Back Button */}\n      <div className=\"fixed top-6 left-6 z-50\">\n        <Button\n          variant=\"outline\"\n          onClick={() => window.location.href = '/blog'}\n          className=\"glass-card\"\n          data-testid=\"back-to-blog-button\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Blog\n        </Button>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-[60vh] flex items-center justify-center overflow-hidden\">\n        {blogPost.featuredImage && (\n          <>\n            <div \n              className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n              style={{ backgroundImage: `url(${blogPost.featuredImage})` }}\n            />\n            <div className=\"absolute inset-0 bg-black/60\" />\n          </>\n        )}\n        \n        <div className=\"relative z-10 text-center text-white px-4 max-w-4xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <Badge className=\"mb-4 bg-primary text-primary-foreground\" data-testid=\"post-category\">\n              {blogPost.category}\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-black mb-6 leading-tight\" data-testid=\"post-title\">\n              {blogPost.title}\n            </h1>\n            <p className=\"text-lg md:text-xl mb-8 opacity-90\" data-testid=\"post-excerpt\">\n              {blogPost.excerpt}\n            </p>\n            \n            <div className=\"flex items-center justify-center gap-6 text-sm\">\n              <div className=\"flex items-center gap-2\" data-testid=\"post-date\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{formatDate(blogPost.publishedAt || blogPost.createdAt)}</span>\n              </div>\n              <div className=\"flex items-center gap-2\" data-testid=\"post-reading-time\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{getReadingTime(blogPost.content)}</span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleShare}\n                className=\"text-white hover:text-white/80\"\n                data-testid=\"share-button\"\n              >\n                <Share2 className=\"h-4 w-4 mr-1\" />\n                Share\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Content */}\n      <section className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.article\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"prose prose-lg max-w-none dark:prose-invert prose-headings:font-bold prose-headings:text-foreground prose-p:text-muted-foreground prose-a:text-primary prose-strong:text-foreground\"\n            data-testid=\"post-content\"\n          >\n            {/* Split content by lines and render each paragraph */}\n            {blogPost.content.split('\\n\\n').map((paragraph, index) => {\n              if (paragraph.startsWith('# ')) {\n                return (\n                  <h1 key={index} className=\"text-4xl font-black mb-6 mt-12 first:mt-0\">\n                    {paragraph.replace('# ', '')}\n                  </h1>\n                );\n              }\n              if (paragraph.startsWith('## ')) {\n                return (\n                  <h2 key={index} className=\"text-3xl font-bold mb-4 mt-10\">\n                    {paragraph.replace('## ', '')}\n                  </h2>\n                );\n              }\n              if (paragraph.startsWith('### ')) {\n                return (\n                  <h3 key={index} className=\"text-2xl font-semibold mb-3 mt-8\">\n                    {paragraph.replace('### ', '')}\n                  </h3>\n                );\n              }\n              if (paragraph.startsWith('- ')) {\n                const listItems = paragraph.split('\\n').filter(line => line.startsWith('- '));\n                return (\n                  <ul key={index} className=\"list-disc pl-6 mb-6 space-y-2\">\n                    {listItems.map((item, itemIndex) => (\n                      <li key={itemIndex} className=\"text-muted-foreground\">\n                        {item.replace('- ', '')}\n                      </li>\n                    ))}\n                  </ul>\n                );\n              }\n              if (paragraph.trim()) {\n                return (\n                  <p key={index} className=\"mb-6 leading-relaxed\">\n                    {paragraph}\n                  </p>\n                );\n              }\n              return null;\n            })}\n          </motion.article>\n\n          {/* Tags */}\n          {blogPost.tags && blogPost.tags.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n              className=\"mt-12 pt-8 border-t border-border\"\n              data-testid=\"post-tags\"\n            >\n              <h3 className=\"text-lg font-semibold mb-4\">Tags</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {blogPost.tags.map((tag, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"outline\"\n                    className=\"hover:bg-muted transition-colors\"\n                    data-testid={`post-tag-${index}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8350},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Calendar, Clock, ArrowRight } from \"lucide-react\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function Blog() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  const { data: blogPosts = [], isLoading } = useQuery({\n    queryKey: ['/api/blog-posts', { published: true }],\n  });\n\n  const categories = [\"all\", \"Technology\", \"Mobile Development\", \"Case Studies\"];\n\n  const filteredPosts = selectedCategory === \"all\" \n    ? (blogPosts as BlogPost[])\n    : (blogPosts as BlogPost[]).filter(post => post.category === selectedCategory);\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return \"No date\";\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\", \n      day: \"numeric\"\n    });\n  };\n\n  const getReadingTime = (content: string) => {\n    const wordsPerMinute = 200;\n    const wordCount = content.split(/\\s+/).length;\n    const minutes = Math.ceil(wordCount / wordsPerMinute);\n    return `${minutes} min read`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"blog-page\">\n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-bg relative overflow-hidden\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <h1 className=\"text-5xl md:text-7xl font-black mb-6 masked-text\" data-testid=\"blog-title\">\n              Insights & Updates\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto\" data-testid=\"blog-subtitle\">\n              Stay updated with the latest trends, insights, and stories from the world of web development, mobile apps, and automation.\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Blog Content */}\n      <section className=\"py-20\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Category Filter */}\n          <div className=\"mb-12\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"flex flex-wrap gap-4 justify-center\"\n              data-testid=\"category-filters\"\n            >\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => setSelectedCategory(category)}\n                  className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${\n                    selectedCategory === category\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted hover:bg-muted/80 text-muted-foreground\"\n                  }`}\n                  data-testid={`category-filter-${category.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {category === \"all\" ? \"All Posts\" : category}\n                </button>\n              ))}\n            </motion.div>\n          </div>\n\n          {/* Blog Posts Grid */}\n          {filteredPosts.length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"no-posts\">\n              <h3 className=\"text-2xl font-semibold mb-4\">No posts found</h3>\n              <p className=\"text-muted-foreground\">Try selecting a different category.</p>\n            </div>\n          ) : (\n            <motion.div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n              layout\n              data-testid=\"blog-posts-grid\"\n            >\n              {filteredPosts.map((post: BlogPost, index) => (\n                <motion.div\n                  key={post.id}\n                  layout\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                  data-testid={`blog-post-${post.id}`}\n                >\n                  <Card className=\"glass-card h-full overflow-hidden group cursor-pointer hover:shadow-lg transition-all duration-300\">\n                    {post.featuredImage && (\n                      <div className=\"relative h-48 overflow-hidden\">\n                        <img\n                          src={post.featuredImage}\n                          alt={post.title}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                          data-testid={`blog-post-image-${post.id}`}\n                        />\n                        <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300\" />\n                      </div>\n                    )}\n                    \n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge variant=\"secondary\" className=\"bg-primary/20 text-primary\" data-testid={`blog-post-category-${post.id}`}>\n                          {post.category}\n                        </Badge>\n                      </div>\n                      <h3 className=\"text-xl font-bold leading-tight group-hover:text-primary transition-colors\" data-testid={`blog-post-title-${post.id}`}>\n                        {post.title}\n                      </h3>\n                    </CardHeader>\n                    \n                    <CardContent className=\"pt-0\">\n                      <p className=\"text-muted-foreground mb-4 line-clamp-2\" data-testid={`blog-post-excerpt-${post.id}`}>\n                        {post.excerpt}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-4\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span data-testid={`blog-post-date-${post.id}`}>\n                            {formatDate(post.publishedAt || post.createdAt)}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span data-testid={`blog-post-reading-time-${post.id}`}>\n                            {getReadingTime(post.content)}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <button \n                        className=\"inline-flex items-center text-primary hover:text-primary/80 font-medium group/btn\"\n                        onClick={() => window.location.href = `/blog/${post.slug}`}\n                        data-testid={`blog-post-read-more-${post.id}`}\n                      >\n                        Read More\n                        <ArrowRight className=\"ml-1 h-4 w-4 group-hover/btn:translate-x-1 transition-transform\" />\n                      </button>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </motion.div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":7779},"client/src/pages/case-study.tsx":{"content":"import { useRoute } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { ArrowLeft, ExternalLink, Clock, Users, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface CaseStudyData {\n  id: string;\n  title: string;\n  client: string;\n  industry: string;\n  timeline: string;\n  teamSize: string;\n  technologies: string[];\n  challenge: string;\n  solution: string;\n  results: string[];\n  heroImage: string;\n  images: string[];\n  liveUrl?: string;\n}\n\nconst caseStudies: Record<string, CaseStudyData> = {\n  \"ecommerce-platform\": {\n    id: \"ecommerce-platform\",\n    title: \"Next-Generation E-commerce Platform\",\n    client: \"TechCorp\",\n    industry: \"E-commerce\",\n    timeline: \"6 months\",\n    teamSize: \"5 developers\",\n    technologies: [\"React\", \"Node.js\", \"MongoDB\", \"Stripe\", \"AWS\"],\n    challenge: \"TechCorp needed a scalable e-commerce platform that could handle high traffic volumes while providing a seamless user experience across all devices. Their existing platform was outdated and couldn't support their growing business needs.\",\n    solution: \"We designed and built a modern, responsive e-commerce platform using React and Node.js, with a microservices architecture for scalability. The platform features real-time inventory management, secure payment processing, and advanced analytics.\",\n    results: [\n      \"300% increase in conversion rates\",\n      \"50% reduction in page load times\", \n      \"99.9% uptime achievement\",\n      \"200% increase in mobile transactions\"\n    ],\n    heroImage: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    images: [\n      \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    ],\n    liveUrl: \"https://techcorp-demo.lovgol.com\"\n  },\n  \"mobile-fitness-app\": {\n    id: \"mobile-fitness-app\",\n    title: \"AI-Powered Fitness Tracking App\",\n    client: \"FitLife\",\n    industry: \"Health & Fitness\",\n    timeline: \"8 months\",\n    teamSize: \"4 developers\",\n    technologies: [\"React Native\", \"Python\", \"TensorFlow\", \"Firebase\"],\n    challenge: \"FitLife wanted to create a comprehensive fitness app that could provide personalized workout recommendations using AI, track user progress, and integrate with various wearable devices.\",\n    solution: \"We developed a cross-platform mobile app using React Native with an AI recommendation engine built in Python. The app features real-time workout tracking, social features, and seamless integration with popular fitness wearables.\",\n    results: [\n      \"500K+ downloads in first 6 months\",\n      \"4.8 star rating on app stores\",\n      \"85% user retention rate\",\n      \"Featured as 'App of the Day'\"\n    ],\n    heroImage: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    images: [\n      \"https://images.unsplash.com/photo-1551650975-87deedd944c3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      \"https://images.unsplash.com/photo-1434596922112-19c563067271?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    ]\n  },\n  \"automation-pipeline\": {\n    id: \"automation-pipeline\", \n    title: \"Enterprise Data Processing Pipeline\",\n    client: \"DataCorp\",\n    industry: \"Data Analytics\",\n    timeline: \"4 months\",\n    teamSize: \"3 developers\",\n    technologies: [\"Python\", \"Apache Kafka\", \"Docker\", \"Kubernetes\", \"PostgreSQL\"],\n    challenge: \"DataCorp needed to automate their manual data processing workflows that were taking hours to complete and prone to human error. They required a scalable solution that could handle growing data volumes.\",\n    solution: \"We built a fully automated data pipeline using Python and Apache Kafka, containerized with Docker and orchestrated using Kubernetes. The system processes millions of records daily with built-in error handling and monitoring.\",\n    results: [\n      \"95% reduction in processing time\",\n      \"99.9% accuracy in data processing\",\n      \"Zero manual intervention required\",\n      \"$500K annual cost savings\"\n    ],\n    heroImage: \"https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    images: [\n      \"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      \"https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n    ]\n  }\n};\n\nexport default function CaseStudy() {\n  const [, params] = useRoute(\"/case-study/:id\");\n  const caseStudyId = params?.id;\n  \n  const caseStudy = caseStudyId ? caseStudies[caseStudyId] : null;\n\n  if (!caseStudy) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold mb-4\">Case Study Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The case study you're looking for doesn't exist.</p>\n          <Button onClick={() => window.history.back()}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"case-study-page\">\n      {/* Back Button */}\n      <div className=\"fixed top-6 left-6 z-50\">\n        <Button\n          variant=\"outline\"\n          onClick={() => window.history.back()}\n          className=\"glass-card\"\n          data-testid=\"back-button\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back\n        </Button>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{ backgroundImage: `url(${caseStudy.heroImage})` }}\n        />\n        <div className=\"absolute inset-0 bg-black/60\" />\n        \n        <div className=\"relative z-10 text-center text-white px-4 max-w-4xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <Badge className=\"mb-4 bg-primary text-primary-foreground\" data-testid=\"case-study-industry\">\n              {caseStudy.industry}\n            </Badge>\n            <h1 className=\"text-5xl md:text-7xl font-black mb-6 leading-tight\" data-testid=\"case-study-title\">\n              {caseStudy.title}\n            </h1>\n            <p className=\"text-xl md:text-2xl mb-8 opacity-90\" data-testid=\"case-study-client\">\n              For {caseStudy.client}\n            </p>\n            \n            {caseStudy.liveUrl && (\n              <Button\n                size=\"lg\"\n                className=\"bg-primary hover:bg-primary/80\"\n                onClick={() => window.open(caseStudy.liveUrl, '_blank')}\n                data-testid=\"view-live-button\"\n              >\n                <ExternalLink className=\"mr-2 h-5 w-5\" />\n                View Live Site\n              </Button>\n            )}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Project Overview */}\n      <section className=\"py-20 bg-card\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\"\n          >\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6 text-center\" data-testid=\"project-timeline\">\n                <Clock className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Timeline</h3>\n                <p className=\"text-muted-foreground\">{caseStudy.timeline}</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6 text-center\" data-testid=\"project-team\">\n                <Users className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Team Size</h3>\n                <p className=\"text-muted-foreground\">{caseStudy.teamSize}</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6 text-center\" data-testid=\"project-tech\">\n                <Code className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Technologies</h3>\n                <div className=\"flex flex-wrap gap-1 justify-center\">\n                  {caseStudy.technologies.slice(0, 3).map((tech, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {tech}\n                    </Badge>\n                  ))}\n                  {caseStudy.technologies.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{caseStudy.technologies.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Challenge & Solution */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"space-y-16\"\n          >\n            <div data-testid=\"challenge-section\">\n              <h2 className=\"text-4xl font-bold mb-6 masked-text\">The Challenge</h2>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                {caseStudy.challenge}\n              </p>\n            </div>\n            \n            <div data-testid=\"solution-section\">\n              <h2 className=\"text-4xl font-bold mb-6 masked-text\">Our Solution</h2>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                {caseStudy.solution}\n              </p>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Project Images */}\n      <section className=\"py-20 bg-card\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"grid grid-cols-1 md:grid-cols-2 gap-8\"\n            data-testid=\"project-images\"\n          >\n            {caseStudy.images.map((image, index) => (\n              <motion.img\n                key={index}\n                src={image}\n                alt={`Project screenshot ${index + 1}`}\n                className=\"rounded-lg shadow-lg w-full h-64 object-cover\"\n                whileHover={{ scale: 1.02 }}\n                transition={{ duration: 0.3 }}\n                data-testid={`project-image-${index}`}\n              />\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Results */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl font-bold mb-12 text-center masked-text\">Results That Matter</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\" data-testid=\"results-section\">\n              {caseStudy.results.map((result, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: index % 2 === 0 ? -30 : 30 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.8, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"glass-card p-6 rounded-lg\"\n                  data-testid={`result-${index}`}\n                >\n                  <div className=\"text-3xl font-bold text-primary mb-2\">✓</div>\n                  <p className=\"text-lg font-medium\">{result}</p>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":12985},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport Hero from \"@/components/Hero\";\nimport About from \"@/components/About\";\nimport Services from \"@/components/Services\";\nimport Clients from \"@/components/Clients\";\nimport Contact from \"@/components/Contact\";\nimport Footer from \"@/components/Footer\";\nimport ServiceModal from \"@/components/ServiceModal\";\nimport InquiryModal from \"@/components/InquiryModal\";\nimport { useState } from \"react\";\nimport type { ServicePreview } from \"@shared/schema\";\n\nexport default function Home() {\n  const [selectedService, setSelectedService] = useState<ServicePreview | null>(null);\n  const [inquiryService, setInquiryService] = useState<string>(\"\");\n  const [showServiceModal, setShowServiceModal] = useState(false);\n  const [showInquiryModal, setShowInquiryModal] = useState(false);\n\n  const handleServiceClick = (service: ServicePreview) => {\n    setSelectedService(service);\n    setShowServiceModal(true);\n  };\n\n  const handleInquiryClick = (serviceName: string) => {\n    setInquiryService(serviceName);\n    setShowServiceModal(false);\n    setShowInquiryModal(true);\n  };\n\n  return (\n    <div className=\"smooth-scroll\" data-testid=\"home-page\">\n      <Navigation />\n      <Hero />\n      <About />\n      <Services onServiceClick={handleServiceClick} />\n      <Clients />\n      <Contact />\n      <Footer />\n      \n      <ServiceModal\n        service={selectedService}\n        isOpen={showServiceModal}\n        onClose={() => setShowServiceModal(false)}\n        onInquiryClick={handleInquiryClick}\n      />\n      \n      <InquiryModal\n        isOpen={showInquiryModal}\n        onClose={() => setShowInquiryModal(false)}\n        initialService={inquiryService}\n      />\n    </div>\n  );\n}\n","size_bytes":1724},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}